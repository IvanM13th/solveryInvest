/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records._UserRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _User extends TableImpl<_UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public._user</code>
     */
    public static final _User _USER = new _User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_UserRecord> getRecordType() {
        return _UserRecord.class;
    }

    /**
     * The column <code>public._user.id</code>.
     */
    public final TableField<_UserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public._user.email</code>.
     */
    public final TableField<_UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._user.first_name</code>.
     */
    public final TableField<_UserRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._user.last_name</code>.
     */
    public final TableField<_UserRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._user.password</code>.
     */
    public final TableField<_UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._user.role</code>.
     */
    public final TableField<_UserRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255), this, "");

    private _User(Name alias, Table<_UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private _User(Name alias, Table<_UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public._user</code> table reference
     */
    public _User(String alias) {
        this(DSL.name(alias), _USER);
    }

    /**
     * Create an aliased <code>public._user</code> table reference
     */
    public _User(Name alias) {
        this(alias, _USER);
    }

    /**
     * Create a <code>public._user</code> table reference
     */
    public _User() {
        this(DSL.name("_user"), null);
    }

    public <O extends Record> _User(Table<O> child, ForeignKey<O, _UserRecord> key) {
        super(child, key, _USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<_UserRecord, Long> getIdentity() {
        return (Identity<_UserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<_UserRecord> getPrimaryKey() {
        return Keys._USER_PKEY;
    }

    @Override
    public List<Check<_UserRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("_user_role_check"), "(((role)::text = ANY ((ARRAY['ADMIN'::character varying, 'GUEST'::character varying])::text[])))", true)
        );
    }

    @Override
    public _User as(String alias) {
        return new _User(DSL.name(alias), this);
    }

    @Override
    public _User as(Name alias) {
        return new _User(alias, this);
    }

    @Override
    public _User as(Table<?> alias) {
        return new _User(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public _User rename(String name) {
        return new _User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _User rename(Name name) {
        return new _User(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public _User rename(Table<?> name) {
        return new _User(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
